<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xceed.Compression.Formats</name>
    </assembly>
    <members>
        <member name="T:Xceed.Compression.Formats.ChecksumStream">
            <summary>
            Represents a pass-through stream that calculates a checksum on the data read or written to the inner stream.
            </summary>
            <remarks>
            <para>The ChecksumStream only supports CRC32 and Adler32 checksums.</para>
            <para>Closing the ChecksumStream will also close the inner stream.</para>
            </remarks><seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.#ctor(System.IO.Stream,Xceed.Compression.Formats.ChecksumType)">
            <summary>
            Initializes a new instance of the ChecksumStream class that will calculate, <b>but not validate</b>, 
            the checksum for the specified stream.
            </summary>
            <param name="inner">The stream whose checksum will be calculated.</param>
            <param name="checksumType">A <see cref="T:Xceed.Compression.Formats.ChecksumType"/> value indicating which type of checksum
            to calculate.</param>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.#ctor(System.IO.Stream,Xceed.Compression.Formats.ChecksumType,System.Int32)">
            <summary>
            Initializes a new instance of the ChecksumStream class that will calculate the checksum for the 
            specified stream.
            </summary>
            <param name="inner">The stream whose checksum will be calculated.</param>
            <param name="checksumType">A <see cref="T:Xceed.Compression.Formats.ChecksumType"/> value indicating which type of checksum
            to calculate.</param>
            <param name="expectedChecksum">The checksum value that is expected after all the data has been read
            from the inner stream.</param>
            <remarks><para>
            The checksum validation will occur when all the data has been read from the inner stream.
            </para><para><note type="caution">
            If an excepted checksum was passed at construction of the ChecksumStream, <see cref="M:Xceed.Compression.Formats.ChecksumStream.Close"/>
            will throw an <see cref="T:System.IO.IOException"/> if the checksums do not match.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.#ctor(System.IO.Stream,Xceed.Compression.Formats.ChecksumType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ChecksumStream class that will calculate the checksum for the 
            specified stream.
            </summary>
            <param name="inner">The stream whose checksum will be calculated.</param>
            <param name="checksumType">A <see cref="T:Xceed.Compression.Formats.ChecksumType"/> value indicating which type of checksum
            to calculate.</param>
            <param name="expectedChecksum">The checksum value that is expected after all the data has been read
            from the inner stream.</param>
            <param name="initialChecksum">The initial checksum value to use.</param>
            <remarks><para><note type="caution">
            If an excepted checksum was passed at construction of the ChecksumStream, <see cref="M:Xceed.Compression.Formats.ChecksumStream.Close"/>
            will throw an <see cref="T:System.IO.IOException"/> if the checksums do not match.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written 
            to the underlying stream.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to <paramref name="origin"/>.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/> value indicating the reference point used to 
            obtain the new position</param>
            <returns>The new position within the current stream.</returns>
            <remarks><para>
            Use the <see cref="P:Xceed.Compression.Formats.ChecksumStream.CanSeek"/> property to determine whether the current instance supports seeking.
            </para><para>If <paramref name="offset"/> is negative, the new position will precede the position specified 
            by <paramref name="origin"/> by the number of bytes specified by <paramref name="offset"/>. If 
            <paramref name="offset"/> is zero, the new position will be the position specified by 
            <paramref name="origin"/>. If <paramref name="offset"/> is positive, the new position will follow 
            the position specified by <paramref name="origin"/> by the number of bytes specified by 
            <paramref name="offset"/>.</para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks><para>
            If the specified value is less than the current length of the stream, the stream is truncated. 
            If the specified value is larger than the current length of the stream, the stream is expanded. 
            If the stream is expanded, the contents of the stream between the old and the new length are not 
            defined.</para><para>
            A stream must support both writing and seeking for SetLength to work.</para><para>
            Use the <see cref="P:Xceed.Compression.Formats.ChecksumStream.CanWrite"/> property to determine whether the current instance supports writing, 
            and the <see cref="P:Xceed.Compression.Formats.ChecksumStream.CanSeek"/> property to determine whether seeking is supported.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream 
            by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified 
            byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + count) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte <paramref name="offset"/> in <paramref name="buffer"/> at 
            which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within 
            this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin 
            copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks><para>
            Use the <see cref="P:Xceed.Compression.Formats.ChecksumStream.CanWrite"/> property to determine whether the current instance supports writing.
            </para><para>
            If the write operation is successful, the position within the stream advances by the number of bytes 
            written. If an exception occurs, the position within the stream remains unchanged.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.CalculateCrc32(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a CRC32 checksum for the specified byte array.
            </summary>
            <param name="buffer">The byte array whose checksum will be calculated.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin 
            reading bytes.</param>
            <param name="count">The number of bytes to read from <paramref name="buffer"/>.</param>
            <param name="previousCrc">
            The CRC32 checksum from a previous call to CalculateCrc32 or 0 if a new CRC should be calculated.</param>
            <returns>The CRC32 checksum calculated for the buffer, including the previous CRC if any.</returns>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.CalculateAdler32(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates an Adler32 checksum for the specified byte array.
            </summary>
            <param name="buffer">The byte array whose checksum will be calculated.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin 
            reading bytes.</param>
            <param name="count">The number of bytes to read from <paramref name="buffer"/>.</param>
            <param name="previousAdler">
            The Adler32 checksum from a previous call to CalculateAdler32 or 0 if a new CRC should be calculated.</param>
            <returns>The Adler32 checksum calculated for the buffer, including the previous CRC if any.</returns>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
            <remarks><para><note type="caution">
            If an excepted checksum was passed at construction of the ChecksumStream, Close
            will throw an <see cref="T:System.IO.IOException"/> if the checksums do not match.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the ChecksumStream.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Compression.Formats.ChecksumStream.Finalize">
            <summary>
            Allows the ChecksumStream object to attempt to free resources and perform other 
            cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:Xceed.Compression.Formats.ChecksumStream.crcTable">
            <summary>
            Static CRC32 table
            </summary>
        </member>
        <member name="F:Xceed.Compression.Formats.ChecksumStream.fastAdler">
            <summary>
            Fast Adler lookup
            </summary>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.CanRead">
            <summary>
            Gets a boolean value indicating whether the current stream supports reading.
            </summary>
            <value><see langword="true"/> if the current stream supports reading;
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>   
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.CanSeek">
            <summary>
            Gets a boolean value indicating whether the current stream supports seeking.
            </summary>
            <value><see langword="true"/> if the current stream supports seeking; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.CanWrite">
            <summary>
            Gets a boolean value indicating whether the current stream supports writing.
            </summary>
            <value><see langword="true"/> if the current stream supports writing; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.Length">
            <summary>
            Gets the length, in bytes, of the stream.
            </summary>
            <value>A value representing the length of the stream in bytes.</value>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value>The current position within the stream.</value>
            <remarks><para>
            The stream must support seeking to get or set the position. You can use the <see cref="P:Xceed.Compression.Formats.ChecksumStream.CanSeek"/> 
            property to determine if the stream supports seeking.
            </para><para>
            Seeking to any location beyond the length of the stream is supported.
            </para><para>
            The Position property does not keep track of the number of bytes from the stream that have been 
            consumed, skipped, or both.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.Checksum">
            <summary>
            Gets a value representing the current checksum.
            </summary><value>A value representing the current checksum.</value>
            <remarks>
            <para>The ChecksumStream only supports CRC32 and Adler32 checksums.</para>
            <para>This property is accessible even when the stream is closed.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.ChecksumStream.ExpectedChecksum">
            <summary>
            Gets or sets the expected checksum.
            </summary><value>A value representing the expected checksum.</value>
            <remarks><para>
            If this value is different than zero, the calculated checksum will be validated
            against the expected checksum when all data has been read from the inner stream.
            </para><para>This property is accessible even when the stream is closed.</para></remarks> 
        </member>
        <member name="T:Xceed.Compression.Formats.ChecksumType">
            <summary>
            Represents the checksum type that will be used to calculate a stream's checksum.
            </summary>
        </member>
        <member name="F:Xceed.Compression.Formats.ChecksumType.Adler32">
            <summary>The Adler-32 checksum is a 32-bit checksum that is often used to verify the integrity
            of data. An Adler-32 checksum is almost as reliable as a CRC checksum but can be
            computed much faster.</summary>    
        </member>
        <member name="F:Xceed.Compression.Formats.ChecksumType.CRC32">
            <summary>Cyclic Redundancy Check. The CRC checksum is a 32-bit checksum that is often used
            to verify the integrity of data. While slightly more reliable than an Adler-32 checksum,
            the CRC checksum takes longer to compute.</summary>
        </member>
        <member name="P:Xceed.Compression.Formats.CompressionFormatsLicense.AllowedVersions">
            <summary>
            All the version number supported by this version of the product.
            </summary>
            <remarks>
            The versions should be in descending order beginning with the
            less restrictive up to the most restrictive.
            </remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.CompressionFormatsLicense.LicenseeType">
            <summary>
            The type of the class or control that is licensed by this class (or, more
            exactly, a class derived from this one).
            </summary>
            If more than one class is licensed by the XceedLicense class, the LicenseeType
            can simply be typeof( Licenser ).
        </member>
        <member name="T:Xceed.Compression.Formats.FormattedCompressedStream">
            <summary>
            Represents a pass-through stream which writes the header and footer of formatted compressed streams.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written 
            to the underlying compressed stream.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to <paramref name="origin"/>.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/> value indicating the reference point used to 
            obtain the new position</param>
            <returns>The new position within the current stream.</returns>
            <remarks><para>
            Use the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanSeek"/> property to determine whether the current instance supports seeking.
            </para><para>If <paramref name="offset"/> is negative, the new position will precede the position specified 
            by <paramref name="origin"/> by the number of bytes specified by <paramref name="offset"/>. If 
            <paramref name="offset"/> is zero, the new position will be the position specified by 
            <paramref name="origin"/>. If <paramref name="offset"/> is positive, the new position will follow 
            the position specified by <paramref name="origin"/> by the number of bytes specified by 
            <paramref name="offset"/>.</para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks><para>
            If the specified value is less than the current length of the stream, the stream is truncated. 
            If the specified value is larger than the current length of the stream, the stream is expanded. 
            If the stream is expanded, the contents of the stream between the old and the new length are not 
            defined.</para><para>
            A stream must support both writing and seeking for SetLength to work.</para><para>
            Use the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanWrite"/> property to determine whether the current instance supports writing, 
            and the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanSeek"/> property to determine whether seeking is supported.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream 
            by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified 
            byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + count) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte <paramref name="offset"/> in <paramref name="buffer"/> at 
            which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
            <example>
            The following example demonstrates how to read compressed data from a MemoryStream and 
            decompress it to a FileStream using the GZipCompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            Imports Xceed.Compression.Formats
            
            ' If you do not want the inner stream to be closed by the GZipCompressedStream
            ' then set the GZipCompressedStream's Transient property to true.
            '
            ' The compressed data was compressed using the Compress example
            
            Dim sourceStream = New MemoryStream(compressedData)
            Dim gzip As New GZipCompressedStream(sourceStream)
            Dim destinationStream As New FileStream("d:\data.txt", FileMode.OpenOrCreate)
            
            ' 32K at a time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream
            Do
                  bytesRead = gzip.Read(buffer, 0, buffer.Length)
                  
                  If bytesRead > 0 Then
                        destinationStream.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the destination stream and the GZipCompressedStream.
            '
            ' Because the GZipCompressedStream will automatically close the source
            ' memory stream, there is no need to call Close once we are done with the stream.
            
            destinationStream.Close()
            gzip.Close()
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            using Xceed.Compression.Formats;
            
            // Because the GZipCompressedStream will automatically close the source
            // memory stream, there is no need to declare the memory stream within a using
            // statement or to call Close once we are done with the stream.
            //
            // If you do not want the inner stream to be closed by the GZipCompressedStream
            // then set the GZipCompressedStream's Transient property to true.
            //
            // The compressed data was compressed using the Compress example
            
            MemoryStream sourceStream = new MemoryStream( compressedData );
            
            using( GZipCompressedStream gzip = new GZipCompressedStream( sourceStream ) )
            {
                  using( FileStream destinationStream = new FileStream( @"d:\data.txt", FileMode.OpenOrCreate ) )
                  {
                        // 32K at a time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
                      
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = gzip.Read( buffer, 0, buffer.Length  ) ) > 0 )
                        {
                              destinationStream.Write( buffer, 0, bytesRead );
                        }
                  }
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within 
            this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from 
            <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin 
            copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks><para>
            Use the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanWrite"/> property to determine whether the current instance supports writing.
            </para><para>
            If the write operation is successful, the position within the stream advances by the number of bytes 
            written. If an exception occurs, the position within the stream remains unchanged.
            </para></remarks>
            <example>
            The following example demonstrates how to read data from a FileStream and compress it to a 
            MemoryStream using the GZipCompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            Imports Xceed.Compression.Formats
            
            Dim sourceStream As New FileStream("d:\data.txt", FileMode.Open)
            
            ' If you do not want the inner stream to be closed by the GZipCompressedStream
            ' then set the GZipCompressedStream's Transient property to true.
            
            Dim destinationStream As New MemoryStream()
            Dim gzip As New GZipCompressedStream(destinationStream)
            
            '32K at a time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream.
            Do
                  bytesRead = sourceStream.Read(buffer, 0, buffer.Length)
                  
                  If bytesRead &gt; 0 Then
                        gzip.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the source stream and the GZipCompressedStream.
            '
            ' Because the GZipCompressedStream will automatically close the destination
            ' memory stream, there is no need to call Close once we are done with the stream.
            
            sourceStream.Close()
            gzip.Close()
            
            ' To get access to the MemoryStream's compressed data, you can use
            ' Dim compressedData() As Byte = destinationStream.ToArray()
            ' ToArray() works even when the memory stream is closed.
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            using Xceed.Compression.Formats;
            
            using( FileStream sourceStream = new FileStream( @"d:\data.txt", FileMode.Open ) )
            {
                  // Because the GZipCompressedStream will automatically close the destination
                  // memory stream, there is no need to declare the memory stream within a using
                  // statement or to call Close once we are done with the stream.
                  //
                  // If you do not want the inner stream to be closed by the GZipCompressedStream
                  // then set the GZipCompressedStream's Transient property to true.
                  
                  MemoryStream destinationStream = new MemoryStream();
                  
                  using( GZipCompressedStream gzip = new GZipCompressedStream( destinationStream ) )
                  { 
                        // 32K at a time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
                        
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = sourceStream.Read( buffer, 0, buffer.Length  ) ) &gt; 0 )
                        {
                              gzip.Write( buffer, 0, bytesRead );
                        }
                  }
                  
                  // To get access to the MemoryStream's compressed data, you can use
                  // byte[] compressedData = destinationStream.ToArray(); 
                  // ToArray() works even when the memory stream is closed.
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.ReadHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.WriteHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.ReadFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.WriteFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Finalize">
            <summary>
            Allows the FormattedCompressedStream object to attempt to free resources and perform other 
            cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.FormattedCompressedStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the FormattedCompressedStream.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.CanRead">
            <summary>
            Gets a boolean value indicating whether the current stream supports reading.
            </summary>
            <value><see langword="true"/> if the current stream supports reading;
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.CanSeek">
            <summary>
            Gets a boolean value indicating whether the current stream supports seeking.
            </summary>
            <value><see langword="true"/> if the current stream supports seeking; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.CanWrite">
            <summary>
            Gets a boolean value indicating whether the current stream supports writing.
            </summary>
            <value><see langword="true"/> if the current stream supports writing; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>If the stream is closed, this property returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.Length">
            <summary>
            Gets the length, in bytes, of the stream.
            </summary>
            <value>A value representing the length of the stream in bytes.</value>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value>The current position within the stream.</value>
            <remarks><para>
            The stream must support seeking to get or set the position. You can use the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanSeek"/> 
            property to determine if the stream supports seeking.
            </para><para>
            Seeking to any location beyond the length of the stream is supported.
            </para><para>
            The Position property does not keep track of the number of bytes from the stream that have been 
            consumed, skipped, or both.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.FormattedCompressedStream.Transient">
            <summary>
            Gets or sets a boolean value indicating if the stream is responsible for closing 
            its inner stream.
            </summary>
            <value><see langword="false"/> if this stream is responsible for closing the inner stream; 
            <see langword="true"/> otherwise.</value>
        </member>
        <member name="T:Xceed.Compression.Formats.GZipCompressedStream">
            <summary>
            Represents a pass-through stream that reads and writes GZip formatted compressed data.
            </summary>
            <remarks><para>
            Compression is applied to data being written to the stream, and decompression is
            performed when data is read from the stream.
            </para><para>
            By default, closing the GZipCompressedStream will also close the inner stream. This behavior
            can be modified by setting the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.Transient"/> property to <see langword="true"/>.
            </para><note>
            To make sure that the header and footer are written, you can call <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> with 0 bytes. If
            neither <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> nor <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/> has been called, the GZipCompressedStream does not
            know if it is reading or writing.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the GZipCompressedStream class specifying the inner
            stream to write to and read from.
            </summary>
            <param name="inner">The stream to write to and read from.</param>    
            <remarks><para>
            If the GZipCompressedStream is being used to write compressed data to the inner stream,
            the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level will be used.
            </para><para>
            Because the GZip compression format only supports the Deflate compression method, all data 
            compressed with the GZipCompressedStream class will be compressed using the
            <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the GZipCompressedStream class specifying the inner stream
            to write to and read from as well as the compression level.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <remarks><para>
            Because the GZip compression format only supports the Deflate compression method, all data 
            compressed with the GZipCompressedStream class will be compressed using the
            <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Formats.GZipHeader,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the GZipCompressedStream class specifying the inner stream
            <b>to write to</b>, the <see cref="T:Xceed.Compression.Formats.GZipHeader"/> to use and the compression level.
            </summary>
            <param name="inner">The stream to write to.</param>
            <param name="header">A reference to the <see cref="T:Xceed.Compression.Formats.GZipHeader"/> object representing
            the compressed data's header.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <remarks><note><b>This constructor can only be used when writing to the inner stream.</b> 
            It makes sure to write the <see cref="T:Xceed.Compression.Formats.GZipHeader"/> even if <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> 
            has not been called before <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Close"/>.</note><para>
            Because the GZip compression format only supports the Deflate compression method, all data 
            compressed with the GZipCompressedStream class will be compressed using the
            <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the GZipCompressedStream class specifying the inner
            stream to write to and read from and the compression level. 
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <param name="readHeader">If <see langword="true"/>, this stream can only be read from and the header
            will be read immediately. If <see langword="false"/>, this stream can be used for reading or writing
            but no header is read until a call to <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> or
            <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/>.</param>
            <remarks><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note><para>
            Because the GZip compression format only supports the Deflate compression method, all data 
            compressed with the GZipCompressedStream class will be compressed using the
            <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes using the GZip compression format and the
            <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method will always be used.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Compress(System.Byte[],Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the GZip compression format and specified compression level.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method will always be used.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the GZip compression format specifying the amount of bytes 
            to compress as well as the compression level.
            </summary>
            <param name="buffer">The array of bytes to compress. A maximum of <paramref name="count"/> 
            bytes are taken from this array and compressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks><para>
            The <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression method will always be used.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of GZip formatted compressed bytes. 
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses an array of GZip formatted compressed bytes specifying the amount of bytes to decompress. 
            </summary>
            <param name="buffer">An array of bytes to decompress. A maximum of <paramref name="count"/> bytes 
            are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <returns>An array of bytes containing the decompressed data. Can be empty.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream 
            by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes containing the decompressed data.
            When this method returns, the buffer contains the specified byte array with the values 
            between <paramref name="offset"/> and (<paramref name="offset"/> + nb bytes read) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte <paramref name="offset"/> in <paramref name="buffer"/> at 
            which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream 
            has been reached.</returns>
            <example>
            The following example demonstrates how to read compressed data from a MemoryStream and 
            decompress it to a FileStream using the GZipCompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            Imports Xceed.Compression.Formats
            
            ' If you do not want the inner stream to be closed by the GZipCompressedStream
            ' then set the GZipCompressedStream's Transient property to true.
            '
            ' The compressed data was compressed using the Compress example
            
            Dim sourceStream = New MemoryStream(compressedData)
            Dim gzip As New GZipCompressedStream(sourceStream)
            Dim destinationStream As New FileStream("d:\data.txt", FileMode.OpenOrCreate)
            
            ' 32K at a time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream
            Do
                  bytesRead = gzip.Read(buffer, 0, buffer.Length)
                  
                  If bytesRead > 0 Then
                        destinationStream.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the destination stream and the GZipCompressedStream.
            '
            ' Because the GZipCompressedStream will automatically close the source
            ' memory stream, there is no need to call Close once we are done with the stream.
            
            destinationStream.Close()
            gzip.Close()
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            using Xceed.Compression.Formats;
            
            // Because the GZipCompressedStream will automatically close the source
            // memory stream, there is no need to declare the memory stream within a using
            // statement or to call Close once we are done with the stream.
            //
            // If you do not want the inner stream to be closed by the GZipCompressedStream
            // then set the GZipCompressedStream's Transient property to true.
            //
            // The compressed data was compressed using the Compress example
            
            MemoryStream sourceStream = new MemoryStream( compressedData );
            
            using( GZipCompressedStream gzip = new GZipCompressedStream( sourceStream ) )
            {
                  using( FileStream destinationStream = new FileStream( @"d:\data.txt", FileMode.OpenOrCreate ) )
                  {
                        // 32K at a time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
                      
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = gzip.Read( buffer, 0, buffer.Length  ) ) > 0 )
                        {
                              destinationStream.Write( buffer, 0, bytesRead );
                        }
                  }
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within 
            this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes containing the compressed data. 
            This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the 
            current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin 
            copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks><para>
            Use the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.CanWrite"/> property to determine whether the current instance supports writing.
            </para><para>
            If the write operation is successful, the position within the stream advances by the number of bytes 
            written. If an exception occurs, the position within the stream remains unchanged.
            </para></remarks>
            <example>
            The following example demonstrates how to read data from a FileStream and compress it to a 
            MemoryStream using the GZipCompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            Imports Xceed.Compression.Formats
            
            Dim sourceStream As New FileStream("d:\data.txt", FileMode.Open)
            
            ' If you do not want the inner stream to be closed by the GZipCompressedStream
            ' then set the GZipCompressedStream's Transient property to true.
            
            Dim destinationStream As New MemoryStream()
            Dim gzip As New GZipCompressedStream(destinationStream)
            
            '32K at a time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream.
            Do
                  bytesRead = sourceStream.Read(buffer, 0, buffer.Length)
                  
                  If bytesRead &gt; 0 Then
                        gzip.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the source stream and the GZipCompressedStream.
            '
            ' Because the GZipCompressedStream will automatically close the destination
            ' memory stream, there is no need to call Close once we are done with the stream.
            
            sourceStream.Close()
            gzip.Close()
            
            ' To get access to the MemoryStream's compressed data, you can use
            ' Dim compressedData() As Byte = destinationStream.ToArray()
            ' ToArray() works even when the memory stream is closed.
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            using Xceed.Compression.Formats;
            
            using( FileStream sourceStream = new FileStream( @"d:\data.txt", FileMode.Open ) )
            {
                  // Because the GZipCompressedStream will automatically close the destination
                  // memory stream, there is no need to declare the memory stream within a using
                  // statement or to call Close once we are done with the stream.
                  //
                  // If you do not want the inner stream to be closed by the GZipCompressedStream
                  // then set the GZipCompressedStream's Transient property to true.
                  
                  MemoryStream destinationStream = new MemoryStream();
                  
                  using( GZipCompressedStream gzip = new GZipCompressedStream( destinationStream ) )
                  { 
                        // 32K at a time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
                        
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = sourceStream.Read( buffer, 0, buffer.Length  ) ) &gt; 0 )
                        {
                              gzip.Write( buffer, 0, bytesRead );
                        }
                  }
                  
                  // To get access to the MemoryStream's compressed data, you can use
                  // byte[] compressedData = destinationStream.ToArray(); 
                  // ToArray() works even when the memory stream is closed.
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.ReadHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.WriteHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.ReadFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipCompressedStream.WriteFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipCompressedStream.Header">
            <summary>
            Gets the compressed data's header.
            </summary>
            <value>A reference to a <see cref="T:Xceed.Compression.Formats.GZipHeader"/> object representing the header of the
            compressed data.</value>
        </member>
        <member name="T:Xceed.Compression.Formats.GZipHeader">
            <summary>
            Represents the header used by the <see cref="T:Xceed.Compression.Formats.GZipCompressedStream"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipHeader.#ctor">
            <summary>
            Initializes a new instance of the GZipHeader class.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipHeader.#ctor(System.Boolean,System.Boolean,System.DateTime,System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of the GZipHeader class specifying the necessary parameter values.
            </summary>
            <param name="isTextFile"><see langword="true"/> if the data to compress has been 
            retrieved from a text file; <see langword="false"/> otherwise.</param>
            <param name="hasHeaderChecksum"><see langword="true"/> if the header as a checksum;
            <see langword="false"/> otherwise.</param>
            <param name="lastWriteDateTime">A <see cref="T:System.DateTime"/> value representing the last 
            modification date/time.</param>
            <param name="extraHeader">An array containing the possible extra headers.</param>
            <param name="fileName">A string representing the header's filename.</param>
            <param name="comment">The header's comment. Can be <see cref="F:System.String.Empty"/> is there is
            no comment.</param>
        </member>
        <member name="M:Xceed.Compression.Formats.GZipHeader.#ctor(Xceed.Compression.Formats.GZipHeader)">
            <summary>
            Initializes a new instance of the GZipHeader class specifying the GZipHeader object
            whose values are to be copied.
            </summary>
            <param name="template">A reference to a GZipHeader object whose values are to be copied.</param>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.IsTextFile">
            <summary>
            Gets or sets a boolean value indication if the data to compress has been retrieved from
            a text file.
            </summary>
            <value><see langword="true"/> if the data to compress has been retrieved from
            a text file; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property must be set before the first call to <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.HasHeaderChecksum">
            <summary>
            Gets or sets a boolean value indicating if the header as a checksum.
            </summary>
            <value><see langword="true"/> if the header as a checksum; <see langword="false"/> otherwise.</value>
            <remarks><para>
            If you set this property to <see langword="true"/> when compressing, even though this is a 
            standard capability for a GZip header, most versions of WinZip won't be able to 
            decompress the file.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.LastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item. 
            </summary>
            <value>A <see cref="T:System.DateTime"/> value representing the last modification date/time.</value>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.ExtraHeader">
            <summary>
            Gets or sets the possible extra headers.
            </summary>
            <value>An array containing the possible extra headers. If this property
            is set to <see langword="null"/>, a 0 element byte array will be assigned.</value>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.FileName">
            <summary>
            Gets or sets the filename from which the header information was retrieved.
            </summary>
            <value>A string representing the header's filename.</value>
            <remarks><para>
            This property must be set before the first call to <see cref="M:Xceed.Compression.Formats.GZipCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.GZipHeader.Comment">
            <summary>
            Gets or sets the header's comment.
            </summary>
            <value>The header's comment. Can be <see cref="F:System.String.Empty"/> if there is no comment.</value>
        </member>
        <member name="T:Xceed.Compression.Formats.HeaderFooterStream">
            <summary>
            Summary description for HeaderFooterStream.
            </summary>
        </member>
        <member name="T:Xceed.Compression.Formats.Licenser">
            <summary>
            Class which is used to register the classes located in the Xceed.Compression.Formats namespace.
            </summary>
            <remarks><para>
            We recommend you set the LicenseKey property in the main entry point of the application. 
            For example, the LicenseKey property can be set, for C# users, in the static main function. 
            For VB.NET users, it can be set in the constructor of the main form or in the "Sub Main" procedure. 
            If no entry point is available, it is recommended that the LicenseKey property be set in a static 
            constructor of a class that will be accessed systematically before any of the library's classes are 
            instantiated or, you can simply set the LicenseKey property immediately BEFORE you instantiate a 
            class.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Formats.Licenser.LicenseKey">
            <summary>
            Gets or sets the license key used to license this product.
            </summary>
            <value>A string value representing the license key used to license this product.</value>
        </member>
        <member name="T:Xceed.Compression.Formats.XceedCompressedStream">
            <summary>
            Represents a pass-through stream that reads and writes Xceed formatted compressed data.
            </summary>
            <remarks><para>
            Compression is applied to data being written to the stream, and decompression is
            performed when data is read from the stream.
            </para><para>
            By default, closing the XceedCompressedStream will also close the inner stream. This behavior
            can be modified by setting the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.Transient"/> property to <see langword="true"/>.
            </para><note>
            To make sure that the header and footer are written, you can call <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> with 0 bytes. If
            neither <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> nor <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/> 
            has been called, the XceedCompressedStream does not know if it is reading or writing.
            </note><note type="caution">
            </note>To compress or decompress data compatible with the XceedCompression object
            of the ActiveX Xceed Zip Compression Library, use the <see cref="T:Xceed.Compression.Formats.XceedCompressedStreamEx"/>
            class instead.</remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param><remarks>
            <note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner
            stream to write to and read from.
            </summary>
            <param name="inner">The stream to write to and read from.</param>    
            <remarks><para>
            If the XceedCompressedStream is being used to write compressed data to the inner 
            stream, the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level will be used 
            and the data will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> 
            compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <param name="readHeader">If <see langword="true"/>, this stream can only be read from and the header
            will be read immediately. If <see langword="false"/>, this stream can be used for reading or writing
            but no header is read until a call to <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> or
            <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/>.</param>
            <remarks><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes using the Xceed compression format.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The byte array will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression 
            method and the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.Compress(System.Byte[],Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the Xceed compression format with the specified compression
            method and level.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the Xceed compression format specifying the amount of bytes 
            to compress as well as compression method and level.
            </summary>
            <param name="buffer">The array of bytes to compress. A maximum of <paramref name="count"/> 
            bytes are taken from this array and compressed</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of Xceed formatted compressed bytes. 
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses an array of Xceed formatted compressed bytes specifying the amount of bytes to decompress. 
            </summary>
            <param name="buffer">An array of bytes to decompress. A maximum of <paramref name="count"/> bytes 
            are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <returns>An array of bytes containing the decompressed data. Can be empty.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.ReadHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.WriteHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.ReadFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStream.WriteFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Xceed.Compression.Formats.XceedCompressedStreamEx">
            <summary>
            Represents a pass-through stream that reads and writes Xceed formatted compressed data.
            <b>Use this class to decompress or compress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <remarks><para>
            Compression is applied to data being written to the stream, and decompression is
            performed when data is read from the stream.
            </para><para>
            By default, closing the XceedCompressedStream will also close the inner stream. This behavior
            can be modified by setting the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.Transient"/> property to <see langword="true"/>.
            </para><note>
            To make sure that the header and footer are written, you can call <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> with 0 bytes. If
            neither <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> nor <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/> 
            has been called, the XceedCompressedStream does not know if it is reading or writing.
            </note><note type="caution">
            The Adler32 of this class is initialized to 1 rather than 0 as with the
            <see cref="T:Xceed.Compression.Formats.XceedCompressedStream"/> class.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param><remarks>
            <note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner
            stream to write to and read from.
            </summary>
            <param name="inner">The stream to write to and read from.</param>    
            <remarks><para>
            If the XceedCompressedStream is being used to write compressed data to the inner 
            stream, the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level will be used 
            and the data will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> 
            compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the XceedCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <param name="readHeader">If <see langword="true"/>, this stream can only be read from and the header
            will be read immediately. If <see langword="false"/>, this stream can be used for reading or writing
            but no header is read until a call to <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> or
            <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/>.</param>
            <remarks><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes using the extended Xceed compression format.
            <b>Use this method to compress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The byte array will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression 
            method and the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.Compress(System.Byte[],Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the extended Xceed compression format with the specified compression
            method and level.
            <b>Use this method to compress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the extended Xceed compression format specifying the amount of bytes 
            to compress as well as compression method and level.
            <b>Use this method to compress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <param name="buffer">The array of bytes to compress. A maximum of <paramref name="count"/> 
            bytes are taken from this array and compressed</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of Xceed formatted compressed bytes. 
            <b>Use this method to decompress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.XceedCompressedStreamEx.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses an array of Xceed formatted compressed bytes specifying the amount of bytes to decompress. 
            <b>Use this method to decompress data compatible with the ActiveX Xceed
            Zip Compression Library (XceedCompression object).</b>
            </summary>
            <param name="buffer">An array of bytes to decompress. A maximum of <paramref name="count"/> bytes 
            are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <returns>An array of bytes containing the decompressed data. Can be empty.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="T:Xceed.Compression.Formats.ZLibCompressedStream">
            <summary>
            Represents a pass-through stream that reads and writes ZLib formatted compressed data.
            </summary>
            <remarks><para>
            Compression is applied to data being written to the stream, and decompression is
            performed when data is read from the stream.
            </para><para>
            By default, closing the ZLibCompressedStream will also close the inner stream. This behavior
            can be modified by setting the <see cref="P:Xceed.Compression.Formats.FormattedCompressedStream.Transient"/> property to <see langword="true"/>.
            </para><note>
            To make sure that the header and footer are written, you can call <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> with 0 bytes. If
            neither <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> nor <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/> 
            has been called, the ZLibCompressedStream does not know if it is reading or writing.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the ZLibCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param><remarks><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ZLibCompressedStream class specifying the inner
            stream to write to and read from.
            </summary>
            <param name="inner">The stream to write to and read from.</param>    
            <remarks><para>
            If the ZLibCompressedStream is being used to write compressed data to the inner 
            stream, the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level will be used 
            and the data will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> 
            compression method.
            </para><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the ZLibCompressedStream class specifying the inner stream
            to write to and read from, the compression method and level to use.
            </summary>
            <param name="inner">The stream to write to and read from.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression method 
            to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <param name="readHeader">If <see langword="true"/>, this stream can only be read from and the header
            will be read immediately. If <see langword="false"/>, this stream can be used for reading or writing
            but no header is read until a call to <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Write(System.Byte[],System.Int32,System.Int32)"/> or
            <see cref="M:Xceed.Compression.Formats.FormattedCompressedStream.Read(System.Byte[],System.Int32,System.Int32)"/>.</param>
            <remarks><note>If the inner stream is readonly, the compressed stream will read the header at construction.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes using the ZLib compression format.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The byte array will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression 
            method and the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.Compress(System.Byte[],Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the ZLib compression format with specified compression
            method and level.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the ZLib compression format specifying the amount of bytes 
            to compress as well as compression method and level.
            </summary>
            <param name="buffer">The array of bytes to compress. A maximum of <paramref name="count"/> 
            bytes are taken from this array and compressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of ZLib formatted compressed bytes. 
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses an array of ZLib formatted compressed bytes specifying the amount of bytes to decompress. 
            </summary>
            <param name="buffer">An array of bytes to decompress. A maximum of <paramref name="count"/> bytes 
            are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <returns>An array of bytes containing the decompressed data. Can be empty.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.ReadHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.WriteHeader(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.ReadFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>    
        </member>
        <member name="M:Xceed.Compression.Formats.ZLibCompressedStream.WriteFooter(System.IO.Stream)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="stream"></param>    
        </member>
    </members>
</doc>
