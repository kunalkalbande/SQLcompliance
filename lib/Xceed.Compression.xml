<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xceed.Compression</name>
    </assembly>
    <members>
        <member name="T:Xceed.Utils.Exceptions.ExceptionFilter">
            <summary>
            Exposes utility methods for filtering exceptions.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Exceptions.ExceptionFilter.IsPublicException(System.Exception)">
            <summary>
            Determines if an exception can be thrown by a public method.
            </summary>
            <param name="exception">The exception to evaluate.</param>
            <returns>true if the exception can be thrown as-is; false if the exception should be converted.</returns>
            <remarks>
            Every public method should have a final exception handler for any un-caught
            exceptions that should call this method to determine if the exception can
            be thrown as-is to the caller (i.e. if the exception makes sense to the caller), or
            if it should be wrapped in a more meaningful exception for the caller.
            </remarks>
            <example>
            The following example illustrate how to implement this:
            <code>
            public void MyMethod()
            {
              try
              {
                DoSomething();
                DoSomethingElse();
              }
              catch( SomeSpecificException e )
              {
                HandleTheException();
              }
              catch( Exception e )
              {
                if( <B>ExceptionFilter.IsPublicException( e )</B> )
                  throw; // Simply pass the exception as-is to the caller
                  
                throw new MyUnexpectedException( "Something unexpected happened.", e );
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Xceed.Compression.CombinedStream">
            <summary>
            Pass-through stream that returns the contents of the provided byte array until it reaches 
            its end, then jumps to it's inner streams current position for any consecutive reads.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CombinedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">
            An array of bytes. A maximum of <paramref name="count"/> bytes are stored in this array.</param>
            <param name="offset">
            The byte offset in <paramref name="buffer"/> at which to begin writing the data read from the stream.</param>
            <param name="count">
            The maximum number of bytes to be stored in <paramref name="buffer"/>.</param>
            <returns>
            The total number of bytes read into the <paramref name="buffer"/>. This may be less 
            than the number of bytes requested if that many bytes aren't currently available, 
            or zero if the end of the stream has been reached. 
            Applications must check the return value to prevent data corruption.</returns>
        </member>
        <member name="M:Xceed.Compression.CombinedStream.Dispose(System.Boolean)">
            <summary>
            Provides correct cleanup of resources in the base class and its derived classes.
            </summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Compression.CombinedStream.CheckIfDisposed">
            <summary>
            Checks if the object has been disposed.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CombinedStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CombinedStream.m_initialPosition">
            <summary>
            Initial position of the inner stream.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CombinedStream.m_leadingBytesRead">
            <summary>
            Counter of how much bytes were read from our leading byte array.
            </summary>
        </member>
        <member name="T:Xceed.Compression.CompressedStream">
            <summary>
            Pass-through stream that applies compression and decompression to an inner stream.
            </summary>
            <remarks><para>
            Compression is applied to data being written to the stream, and decompression is
            performed when data is read from the stream.
            </para><para>
            The compression engine itself is not built into the <see langword="CompressedStream"/> class. Instead,
            user-supplied <see cref="T:Xceed.Compression.Compressor"/> and <see cref="T:Xceed.Compression.Decompressor"/> classes are used.
            </para><para>
            It is possible to implement your own compression algorithm by implementing classes derived
            from <see cref="T:Xceed.Compression.Compressor"/> and <see cref="T:Xceed.Compression.Decompressor"/>.
            </para><para>
            By default, closing the <see langword="CompressedStream"/> will also close the inner stream. This behavior
            can be modified by setting the <see cref="P:Xceed.Compression.CompressedStream.Transient"/> property to <see langword="true"/>.
            </para></remarks>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_readSize">
            <summary>
            Represents the number of bytes to read from the inner stream each time
            decompressed data is needed.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a <see langword="CompressedStream"/> using the default 
            compressor and decompressor classes.
            </summary>
            <param name="inner">Inner stream.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Initializes a <see langword="CompressedStream"/> using the provided compression method and level.
            </summary>
            <param name="inner">Inner stream.</param>
            <param name="method">Compression method to use.</param>
            <param name="level">Compression level to use.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Compressor)">
            <summary>
            Initializes a compress-only <see langword="CompressedStream"/> using the provided compressor class.
            </summary>
            <param name="inner">Inner stream.</param>
            <param name="compressor">Compressor class used to perform data compression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Decompressor)">
            <summary>
            Initializes a decompress-only <see langword="CompressedStream"/> using the provided decompressor class.
            </summary>  
            <param name="inner">Inner stream.</param>
            <param name="decompressor">Decompressor class used to perform data decompression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Compressor,Xceed.Compression.Decompressor)">
            <summary>
            Initializes a <see langword="CompressedStream"/> using the provided compressor and decompressor classes.
            </summary>
            <param name="inner">Inner stream.</param>
            <param name="compressor">Compressor class used to perform data compression.</param>
            <param name="decompressor">Decompressor class used to perform data decompression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Flush">
            <summary>
            Causes all pending compressed data to be written to the inner stream, and updates
            the underlying data source or repository of the inner stream with the current state 
            of the buffer.
            </summary>
            <remarks><para>
            This may degrade compression for some compression algorithms, so it should be used 
            only when necessary.
            </para><note type="caution">
            Even if all the inner buffers are flushed, the inner stream will not be complete unless the 
            <see cref="M:Xceed.Compression.CompressedStream.Close"/> is called. This is because when the CompressedStream is 
            closed it writes the final compressed information to the inner stream; Flush does not.
            </note></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the inner stream.
            </summary>
            <param name="offset">
            Byte offset relative to <paramref name="origin"/>.
            </param>
            <param name="origin">
            A field of <see cref="T:System.IO.SeekOrigin"/> indicating the 
            reference point from which the new position is to be obtained.
            </param>
            <returns>The new position within the current stream.</returns>
            <remarks><para>
            If the compression level is set to <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the 
            compression method set to <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then we
            permit seeking within the inner stream as long as the inner stream supports seeking.
            If the compression level is different than <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the
            compression method different than <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then
            seeking is not supported.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the inner stream.
            </summary>
            <param name="value">
            An integer indicating the desired length of the inner stream in bytes.
            </param>
            <remarks><para>
            If the compression level is set to <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the 
            compression method set to <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then we
            permit seeking within the inner stream as long as the inner stream supports seeking.
            If the compression level is different than <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the
            compression method different than <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then
            seeking is not supported.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads and decompresses a sequence of bytes from the inner stream.
            </summary>
            <param name="buffer">
            An array of bytes. A maximum of <paramref name="count"/> bytes are stored in this array.
            </param>
            <param name="offset">
            The byte offset in <paramref name="buffer"/> at which to begin storing the data 
            decompressed from the inner stream.
            </param>
            <param name="count">
            The maximum number of bytes to be stored in <paramref name="buffer"/>.
            </param>
            <returns>
            The total number of bytes read into the <paramref name="buffer"/>. This may be less 
            than the number of bytes requested if that many bytes aren't currently available, 
            or zero if the end of the stream has been reached. 
            Applications must check the return value to prevent data corruption.
            </returns>
            <remarks><para>
            The <see langword="CompressedStream"/> object reads and decompresses data from the inner stream into a
            private buffer, and uses this buffer to satisfy Read requests. If a such a request
            cannot be satisfied, more data is read and decompressed from the inner stream.
            </para><para>
            When Read returns a positive value, it means that there is more uncompressed data 
            available in the <see langword="CompressedStream"/> buffer, but the end of the inner stream could have 
            already been reached.
            </para><para>
            When this method returns 0, it really means that all of the inner stream's data has been
            read and decompressed.
            </para><para>
            If the reading process to decompress the byte array has already begun, <see cref="P:Xceed.Compression.CompressedStream.CanWrite"/>
            will always return <see langword="false"/>.
            </para></remarks>
            <example>
            The following example demonstrates how to read compressed data from a MemoryStream and decompress 
            it to a FileStream using the CompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            
            ' If you do not want the inner stream to be closed by the CompressedStream
            ' then set the CompressedStream's Transient property to true.
            '
            ' The compressed data was compressed using the Compress example
            Dim sourceStream = New MemoryStream( compressedData )
            Dim compStream As New CompressedStream( sourceStream )
            Dim destinationStream As New FileStream("d:\data.txt", FileMode.OpenOrCreate)
            
            ' 32K at at time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream
            Do
                  bytesRead = compStream.Read(buffer, 0, buffer.Length)
                  If bytesRead &gt; 0 Then
                        destinationStream.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the destination stream and the CompressedStream.
            '
            ' Because the CompressedStream will automatically close the source
            ' memory stream, there is no need to call Close once we are done with the stream.
            destinationStream.Close()
            compStream.Close()
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            
            // Because the CompressedStream will automatically close the source
            // memory stream, there is no need to declare the memory stream within a using
            // statement or to call Close once we are done with the stream.
            //
            // If you do not want the inner stream to be closed by the CompressedStream
            // then set the CompressedStream's Transient property to true.
            //
            // The compressed data was compressed using the Compress example
            
            MemoryStream sourceStream = new MemoryStream( compressedData );
            
            using( CompressedStream compStream = new CompressedStream( sourceStream ) )
            {
                  using( FileStream destinationStream = new FileStream( @"d:\data.txt", FileMode.OpenOrCreate ) )
                  {
            
                        // 32K at at time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
            
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = compStream.Read( buffer, 0, buffer.Length  ) ) &gt; 0 )
                        {
                              destinationStream.Write( buffer, 0, bytesRead );
                        }
                  }
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses and writes a sequence of bytes to the inner stream.
            </summary>
            <param name="buffer">
            An array of bytes. A maximum of <paramref name="count"/> bytes are taken from this 
            array and compressed into the inner stream.
            </param>
            <param name="offset">
            The byte offset in <paramref name="buffer"/> at which to begin taking the data.
            </param>
            <param name="count">
            The maximum number of bytes to be taken from <paramref name="buffer"/>.
            </param>
            <returns>
            The total number of bytes written to the inner stream. This may be less than the
            <paramref name="count"/> parameter. It may even be 0.
            </returns>
            <remarks><para>
            In order to achieve optimum compression, some compression algorithms store data to 
            compress into internal buffers before actually compressing it.
            </para><para>
            When Write returns, all the data provided in the <paramref name="buffer"/> parameter
            has been successfully given to the compressor, but has not necessarily been written
            to the inner stream.
            </para><para>
            The return value of this method represents the number of compressed bytes that have
            been actually written to the inner stream.
            </para><para>
            If you need to write all pending data to the inner stream, you can call the
            <see cref="M:Xceed.Compression.CompressedStream.Flush"/> method on the <see langword="CompressedStream"/>.
            </para><para>
            If the writing process to compress the byte array has already begun, <see cref="P:Xceed.Compression.CompressedStream.CanRead"/>
            will always return <see langword="false"/>.
            </para></remarks>
            <example>
            The following example demonstrates how to read data from a FileStream and compress it to a 
            MemoryStream using the CompressedStream class.
            <code lang="Visual Basic">
            Imports System.IO
            Imports Xceed.Compression
            
            Dim sourceStream As New FileStream("d:\data.txt", FileMode.Open)
            
            ' If you do not want the inner stream to be closed by the CompressedStream
            ' then set the CompressedStream's Transient property to true.
            Dim destinationStream As New MemoryStream()
            Dim compStream As New CompressedStream( destinationStream )
            
            '32K at at time.
            Dim buffer(32768) As Byte
            Dim bytesRead As Integer = 0
            
            ' Loop until we have nothing more to read from the source stream.
            Do
                  bytesRead = sourceStream.Read(buffer, 0, buffer.Length)
                  
                  If bytesRead &gt; 0 Then
                        compStream.Write(buffer, 0, bytesRead)
                  End If
            Loop Until bytesRead = 0
            
            ' Close the source stream and the CompressedStream.
            '
            ' Because the CompressedStream will automatically close the destination
            ' memory stream, there is no need to call Close once we are done with the stream.
            sourceStream.Close()
            compStream.Close()
            
            ' To get access to the MemoryStream's compressed data, you can use
            ' Dim compressedData() As Byte = destinationStream.ToArray()
            ' ToArray() works even when the memory stream is closed.
            </code>
            <code lang="C#">
            using System.IO;
            using Xceed.Compression;
            
            using( FileStream sourceStream = new FileStream( @"d:\data.txt", FileMode.Open ) )
            {
                  // Because the CompressedStream will automatically close the destination
                  // memory stream, there is no need to declare the memory stream within a using
                  // statement or to call Close once we are done with the stream.
                  //
                  // If you do not want the inner stream to be closed by the CompressedStream
                  // then set the CompressedStream's Transient property to true.
                  
                  MemoryStream destinationStream = new MemoryStream();
                  
                  using( CompressedStream compStream = new CompressedStream( destinationStream ) )
                  { 
                        // 32K at at time.
                        byte[] buffer = new byte[ 32768 ];
                        int bytesRead = 0;
                      
                        // Loop until we have nothing more to read from the source stream.
                        while( ( bytesRead = sourceStream.Read( buffer, 0, buffer.Length  ) ) &gt; 0 )
                        {
                              compStream.Write( buffer, 0, bytesRead );
                        }
                  }
                  
                  // To get access to the MemoryStream's compressed data, you can use
                  // byte[] compressedData = destinationStream.ToArray(); 
                  // ToArray() works even when the memory stream is closed.
            }
            </code></example>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.GetRemainingStream">
            <summary>
            Retrieves a stream which starts immediately after the last byte of compressed data.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> containing the data located immediately after the
            last byte of compressed data allowing you to continue reading the data.</returns>
            <remarks><para>
            In order to access the remaining data, the CompressedStream's <see cref="P:Xceed.Compression.CompressedStream.Transient"/>
            property must be set to <see langword="true"/>.
            </para><para>
            In the case where more than one chunks of compressed data are appended to each other in the 
            same stream, you can use the GetRemainingStream method to decompress the next chunk of 
            compressed data.</para><para>
            Closing the stream returned by the GetRemainingStream method will not close the inner stream. 
            You will need to call the inner stream's Close method yourself once you are finished with the 
            returned stream.
            </para><para>
            GetRemainingStream must be called before the CompressedStream's <see cref="M:Xceed.Compression.CompressedStream.Close"/> method
            is called.
            </para></remarks>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_stream">
            <summary>
            The inner stream.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_compressor">
            <summary>
            Compressor class to use for compression.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_decompressor">
            <summary>
            Decompressor class to use for decompression.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_delayedInitialization">
            <summary>
            The (De)Compressor will be created when needed.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_compressionMethod">
            <summary>
            Compression method that will be used to create the (De)Compressor instances.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_compressionLevel">
            <summary>
            Compression level that will be used to create the Compressor instance.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_decompressStream">
            <summary>
            Private buffer used to store decompressed data.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_endOfData">
            <summary>
            Represents the endOfData parameter to pass to the compressor/decompressor classes.
            </summary>
            <remarks><para>
            It is false as long as data is being compressed/decompressed, and the finalizer
            sets it to true before calling Flush.
            </para></remarks>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_transient">
            <summary>
            Indicates if we are responsible for closing the inner stream.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_noCompression">
            <summary>
            Indicates if we should call m_stream directly, without performing any compression/decompression.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Close">
            <summary>
            Closes the stream, and releases any resources associated with it.
            </summary>
            <remarks><para>
            If the <see cref="P:Xceed.Compression.CompressedStream.Transient"/> is <see langword="true"/>, the inner stream
            will <b>not</b> be closed. If it is <see langword="false"/>, it will be
            closed.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Finalize">
            <summary>
            Allows the CompressedStream object to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Dispose(System.Boolean)">
            <summary>
            Provides correct cleanup of resources in the base class and its derived classes.
            </summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.CheckIfDisposed">
            <summary>
            Checks if the object has been disposed.
            </summary>    
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_dataWritten">
            <summary>Indicates if at least 1 byte of data has been written.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressedStream.m_useZlibHeaders">
            <summary>Let ZLIB create or expect ZLIB headers in the data.</summary>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanRead">
            <summary>
            Determines whether the inner stream supports reading AND the compressed stream 
            supports data decompression.
            </summary><value><see langword="true"/> if the stream supports reading/decompressing;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If the reading process to decompress the stream's data has already begun, <see cref="P:Xceed.Compression.CompressedStream.CanWrite"/>
            will always return <see langword="false"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanSeek">
            <summary>
            Determines whether the inner stream supports seeking. 
            </summary><value><see langword="true"/> if the stream supports seeking;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If the compression level is set to <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the 
            compression method set to <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then we
            permit seeking within the inner stream as long as the inner stream supports seeking.
            If the compression level is different than <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the
            compression method different than <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then
            seeking is not supported.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanWrite">
            <summary>
            Determines whether the inner stream supports writing AND the compressed stream 
            supports data compression.
            </summary><value><see langword="true"/> if the stream supports writing/compressing;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If the writing process to compress the stream's data has already begun, <see cref="P:Xceed.Compression.CompressedStream.CanRead"/>
            will always return <see langword="false"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Length">
            <summary>
            Returns the length, in bytes, of the inner stream.
            </summary><value>Length of the inner stream. </value>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Position">
            <summary>
            Gets the current position of the inner stream, or sets the current position 
            of this stream to the given value.
            </summary><value>Position of the inner stream.</value>
            <remarks><para>
            If the compression level is set to <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the 
            compression method set to <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then we
            permit seeking within the inner stream as long as the inner stream supports seeking.
            If the compression level is different than <see cref="F:Xceed.Compression.CompressionLevel.None"/> or the
            compression method different than <see cref="F:Xceed.Compression.CompressionMethod.Stored"/>, then
            seeking is not supported.
            </para></remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Transient">
            <summary>
            Gets or sets a boolean value indicating if the stream is responsible for closing 
            its inner stream.
            </summary>
            <value><see langword="false"/> if this stream is responsible for closing the inner stream; 
            <see langword="true"/> otherwise.</value>
        </member>
        <member name="T:Xceed.Compression.CompressionException">
            <summary>
            Exception that is thrown when there is a problem compressing or decompressing data.
            </summary>
            <remarks><para>
            This exception serves as the base class for all custom exceptions defined 
            in the Xceed.Compression namespace.
            </para><para>
            Since this exception is thrown by the <see cref="T:Xceed.Compression.CompressedStream"/> object, it
            derives from <see cref="T:System.IO.IOException"/>. This is because any code that
            use streams will expect an IOException to be thrown in case of errors while working
            with the stream.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.Compression.CompressionInternalException">
            <summary>
            Exception that is thrown when something unexpected occurs while compressing or decompressing data.
            </summary>
            <remarks><para>
            This exception means that there was an internal failure in the library, and that nothing could be
            done to prevent it. Such failures should never occur.</para><para>
            To get more details about what went wrong, you can inspect the <see cref="P:System.Exception.InnerException"/>
            property. It is a reference to the exception that caused the internal failure.</para><para>
            If you ever catch this exception in your code, please contact Xceed Software Technical Support
            immediately.</para></remarks>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified inner exception.
            </summary>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message test.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.Compression.CompressionLevel">
            <summary>
            Represents the amount of compression to be applied when compressing data.
            The greater the amount of compression applied, the greater the time it takes to perform the compression.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Lowest">
            <summary>Minimum compression. Takes the least amount of time to compress data.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Normal">
            <summary>Normal compression. Best balance between the time it takes to compress data 
            and the compression ratio achieved.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Highest">
            <summary>Maximum compression. Best compression ratio that the compression algorithm is capable of 
            producing. Compared to the Normal compression level, this level significantly increases compression 
            time for only slightly smaller compressed data. It is recommended to use this setting only when 
            you really need to achieve the smallest possible files and when compression time is not important.
            </summary>
        </member>
        <member name="P:Xceed.Compression.CompressionLicense.AllowedVersions">
            <summary>
            All the version number supported by this version of the product.
            </summary>
            <remarks>
            The versions should be in descending order beginning with the
            less restrictive up to the more restrictive.
            </remarks>
        </member>
        <member name="P:Xceed.Compression.CompressionLicense.LicenseeType">
            <summary>
            The type of the class or control that is licensed by this class (or, more
            exactly, a class derived from this one).
            </summary>
            <remarks>
            If more than one class is licensed by the XceedLicense class, the LicenseeType
            can simply be typeof( Licenser ).
            </remarks>
        </member>
        <member name="T:Xceed.Compression.CompressionMethod">
            <summary>
            Represents the compression algorithm to be used when compressing data.
            </summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Stored">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Deflated">
            <summary>Deflate algorithm. Standard algorithm used by the PKZip 2.04g format.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Deflated64">
            <summary>Deflate64 algorithm also know as Enhanced Deflate. 
            Deflate64 is a variation of the Deflate algorithm that uses a 64K sliding window rather 
            than a 32K window in order to compress a sequence of bits. Deflate64 takes longer to compress 
            data than Deflate, however it provides better compression. <b>The Xceed Self-Extractor
            Module does not support the Deflated64 compression method.</b></summary>
        </member>
        <member name="T:Xceed.Compression.Compressor">
            <summary>
            Abstract class from which other classes can derive to implement custom compression algorithms.
            </summary>
            <remarks>
            <para>
            This class (and its subclasses) will primarily be used by the 
            <see cref="T:Xceed.Compression.CompressedStream"/> class.</para>
            <para>
            A subclass must at least implement the abstract <see cref="M:Xceed.Compression.Compressor.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)"/> method.
            </para>
            </remarks>
            <seealso cref="T:Xceed.Compression.CompressedStream"/>
        </member>
        <member name="M:Xceed.Compression.Compressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Compression.Compressor"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Compressor.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)">
            <summary>
            Compresses an array of bytes.
            </summary>
            <param name="buffer">
            An array of bytes to compress. A maximum of <paramref name="count"/> bytes are taken
            from this array and compressed.
            </param>
            <param name="offset">
            The byte offset in <paramref name="buffer"/> at which to begin taking the data to compress.
            </param>
            <param name="count">
            The maximum number of bytes to be taken from <paramref name="buffer"/>.
            </param>
            <param name="endOfData">
            Indicates if this call ends the stream of data to compress.
            </param>
            <param name="compressed">
            An array of bytes containing the compressed data. Can be empty.
            </param>
            <returns>
            The number of bytes written to the <paramref name="compressed"/> parameter.
            </returns>
            <remarks>
            When the first call to Compress is made, a compression "session" is created. This
            session remains opened as long as Compress is called with the parameter 
            <paramref name="endOfData"/> set to False.
            <para>
            During a compression session, the compression engine can choose to keep the data
            to compress in an internal buffer and return an empty array after a call to Compress.
            Many compression algorithms do this to get optimum compression by examining a certain
            number of bytes before compressing anything.
            </para><para>
            A call to Compress with an empty <paramref name="buffer"/> or a <paramref name="count"/>
            of zero tells the compression engine to flush its internal buffer and return the compressed
            data. This may degrade the compression ratio.
            </para><para>
            When Compress is called with the parameter <paramref name="endOfData"/> set to True,
            the compression session is closed and all of the remaining compressed data is returned.
            The next call to Compress will create a new compression session.
            </para><para>
            The <paramref name="compressed"/> array may have a Length greater than the number
            of bytes returned by the call to Compress.
            </para>
            </remarks>
        </member>
        <member name="T:Xceed.Compression.Decompressor">
            <summary>
            An abstract class from which other classes can derive to implement custom decompression algorithms.
            </summary>
            <remarks>
            This class (and its subclasses) will primarily be used by the 
            <see cref="T:Xceed.Compression.CompressedStream"/> class.
            <para>
            A subclass must at least implement the abstract <see cref="M:Xceed.Compression.Decompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.Boolean@,System.Byte[]@,System.Int32@)"/> method.
            </para>
            </remarks>
            <seealso cref="T:Xceed.Compression.CompressedStream"/>
        </member>
        <member name="M:Xceed.Compression.Decompressor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Compression.Decompressor"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Compression.Decompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.Boolean@,System.Byte[]@,System.Int32@)">
            <summary>
            Decompresses an array of bytes.
            </summary>
            <param name="buffer">
            An array of bytes to decompress. A maximum of <paramref name="count"/> bytes are taken
            from this array and decompressed.
            </param>
            <param name="offset">
            The byte offset in <paramref name="buffer"/> at which to begin taking the data to decompress.
            </param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="endOfData"><see langword="true"/> if the end of the compressed data has been reached;
            <see langword="false"/> otherwise.</param>
            <param name="decompressed">An array of bytes containing the decompressed data. Can be empty if no
            bytes were decompressed.</param>
            <param name="remaining">The number of unused bytes read from buffer the for decompression.
            </param>
            <returns>
            The number of bytes written to the <paramref name="decompressed"/> parameter.
            </returns>
            <remarks>
            When the first call to Decompress is made, a decompression "session" is created. This
            session remains opened as long as Decompress is called with the parameter 
            <paramref name="endOfData"/> set to False.
            <para>
            During a decompression session, the decompression engine can choose to keep the data
            to decompress in an internal buffer and return an empty array after a call to Decompress.
            This could happen if not enough compressed data has yet been provided to determine the
            decompressed result.
            </para><para>
            When Decompress is called with the parameter <paramref name="endOfData"/> set to True,
            the decompression session is closed and all of the remaining decompressed data is returned.
            The next call to Decompress will create a new decompression session.
            </para><para>
            The <paramref name="decompressed"/> array may have a Length greater than the number
            of bytes returned by the call to Decompress.
            </para>
            </remarks>
        </member>
        <member name="T:Xceed.Compression.Licenser">
            <summary>
            Class which is used to register the classes located in the Xceed.Compression namespace.
            </summary>
            <remarks><para>
            We recommend you set the LicenseKey property in the main entry point of the application.
            For example, the LicenseKey property can be set, for C# users, in the static main
            function. For VB.NET users, it can be set in the constructor of the main form or
            in the "Sub Main" procedure. If no entry point is available, it is recommended that the LicenseKey 
            property be set in a static constructor of a class that will be accessed systematically before
            any of the library's classes are instantiated or, you can simply set the LicenseKey
            property immediately BEFORE you instantiate a class.</para></remarks>
        </member>
        <member name="P:Xceed.Compression.Licenser.LicenseKey">
            <summary>
            Gets or sets the license key used to license this product.
            </summary>
            <value>A string value representing the license key used to license this product.</value>
        </member>
        <member name="T:Xceed.Compression.ManagedDeflate64Compressor">
            <summary>
            Summary description for ManagedDeflate64Compressor.
            </summary>
        </member>
        <member name="T:Xceed.Compression.ManagedDeflateCompressor">
            <summary>
            Implements the Deflate compression using the Xceed translation of ZLib to C#
            </summary>
            <seealso cref="T:Xceed.Compression.Decompressor"/>
            <seealso cref="T:Xceed.Compression.CompressedStream"/>
            <seealso cref="T:Xceed.Compression.ManagedDeflateDecompressor"/>
        </member>
        <member name="M:Xceed.Compression.ManagedDeflateCompressor.#ctor(System.Int32,System.Boolean)">
            <summary>
            ManagedDeflateCompressor ctor
            </summary>
        </member>
        <member name="M:Xceed.Compression.ManagedDeflateCompressor.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)">
            <summary>
            Compress
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="endOfData"></param>
            <param name="compressed"></param>
            <returns></returns>
        </member>
        <member name="T:Xceed.Compression.ManagedDeflateDecompressor">
            <summary>
            Implements the Deflate decompression using the Xceed translation of ZLib to C#
            </summary>
            <seealso cref="T:Xceed.Compression.Decompressor"/>
            <seealso cref="T:Xceed.Compression.CompressedStream"/>
            <seealso cref="T:Xceed.Compression.ManagedDeflateCompressor"/>
        </member>
        <member name="T:Xceed.Compression.QuickCompression">
            <summary>
            Exposes static methods that allow basic byte array compression and decompression operations.
            </summary>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            The byte array will be compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/> compression 
            method and the <see cref="F:Xceed.Compression.CompressionLevel.Highest"/> compression level.
            </para><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[],Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes using the specified compression method and level.
            </summary>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>
            Compresses an array of bytes specifying the amount of bytes to compress as well as the compression 
            method and level.
            </summary>
            <param name="buffer">The array of bytes to compress. A maximum of <paramref name="count"/> 
            bytes are taken from this array and compressed</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the compression
            method to use.</param>
            <param name="level">A <see cref="T:Xceed.Compression.CompressionLevel"/> value representing the compression 
            level to use.</param>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks><para>
            If the data to compress is not a byte array, it will need to be converted into a byte array 
            before it can be compressed. This can be done, in the case of a string, using the 
            <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[])">
            <summary>
            Decompresses an array of bytes compressed using the <see cref="F:Xceed.Compression.CompressionMethod.Deflated"/>
            compression method. 
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[],Xceed.Compression.CompressionMethod)">
            <summary>
            Decompresses an array of compressed bytes specifying the compression method that was used
            to compress the byte array.
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the 
            compression method that was used to compress the byte array.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod)">
            <summary>
            Decompresses a compressed byte array specifying the amount of bytes to decompress as well
            as the compression method that was used to compress the byte array.
            </summary>
            <param name="buffer">An array of bytes to decompress.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin taking 
            the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from <paramref name="buffer"/>.</param>
            <param name="method">A <see cref="T:Xceed.Compression.CompressionMethod"/> value representing the 
            compression method that was used to compress the byte array.</param>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks><para>
            If the original data contained within the decompressed byte array was a string, then it is 
            possible to retrieve the string using the <see cref="M:System.Text.Encoding.GetBytes(System.Char[])"/> method 
            of the <see cref="T:System.Text.Encoding"/> class.
            </para></remarks>
        </member>
    </members>
</doc>
